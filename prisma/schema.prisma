// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         String   @id @default(uuid()) // ID unico e gerado.
  username   String   @unique // Com unique não permite que tenham nomes cadastrados no banco de dados iguais
  name       String
  bio        String?  @db.Text
  email      String?  @unique
  avatar_url String?
  created_at DateTime @default(now()) // Now é um função do proprio prisma, ele vai preencher o valor atual do registro 

  accounts      Account[] // Isso aqui os Array não so internos do Prisma, eles não irão criar colunas
  sessions      Session[] //Servem para poder fazer user.timeIntervals, se não teria q colcoar "-" user.time_intervals,
  timeIntervals UserTimeInterval[]
  Scheduling    Scheduling[]

  // O prisma irá criar a nome da tabela como User, como caixa alta e no plural
  @@map("users") // Se quero alterar isso faço @@map() passando o nome que quero que tenha na tabela, neste caso "users" no publural e em caixa baixa
}

// Um accont para cara forma que o user logar, identificado pelo provider, pode ser pelo google,github, porém o user é msm
model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([user_id])
  @@map("accounts")
}

//Cada vez que o user fizer login em uma máquina diferente, terei uma Session
model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int
  user                  User   @relation(fields: [user_id], references: [id])
  user_id               String

  @@index([user_id])
  @@map("user_time_intervals")
}

model Scheduling {
  id           String   @id @default(uuid())
  date         DateTime
  name         String
  email        String
  observations String?
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id])
  user_id      String

  @@index([user_id])
  @@map("schedulings")
}
